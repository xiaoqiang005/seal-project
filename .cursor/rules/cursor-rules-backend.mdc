---
description: 
globs: backend1/**/*.py
alwaysApply: false
---
---
description: 后端开发规范（Python、Django）
globs: backend1/**/*.py
alwaysApply: false
---
# 后端开发规则

## Python 规则

- 遵循 PEP 8 风格指南和命名约定
- 使用类型注解增强代码可读性和类型安全性
- 使用虚拟环境管理依赖：
  - 优先使用 `venv` 进行环境隔离
  - 使用 `requirements.txt` 记录依赖
- 使用上下文管理器处理资源（如文件操作）
- 优先使用列表推导式、生成器表达式和字典推导式
- 使用 `pytest` 进行测试，保持高测试覆盖率
- 使用文档字符串（docstrings）记录函数、类和模块
- 遵循面向对象设计原则（SOLID）
- 使用异常处理保证程序健壮性
- 使用 `dataclasses` 或 `pydantic` 模型表示数据

## Django 规则

- 使用 `python manage.py startapp` 在项目中创建新应用
- 在 `models.py` 中保存模型，并在 `admin.py` 中注册以使用管理界面
- 使用 Django 的 ORM 而非原始 SQL 查询
- 使用 `select_related` 和 `prefetch_related` 避免 N+1 查询问题
- 使用 Django 表单进行验证
- 为常见查询创建自定义模型管理器
- 使用 Django 内置的身份验证系统
- 在环境变量中存储设置并通过 `settings.py` 访问

## 数据库规则

- 使用 MySQL 作为项目数据库（seal 数据库）
- 连接信息：
  - 虚拟机地址：192.168.0.115
  - 数据库用户：root
  - 数据库密码：123456
- 使用数据库迁移管理架构变更
- 为复杂查询创建索引优化性能
- 在模型中定义合适的数据约束和验证规则
- 避免在循环中执行数据库查询
- 使用批量创建/更新操作处理大量记录
- 适当规划数据库分区和表设计

## 项目结构规范

### 目录结构概要
- 遵循Django标准项目结构，主要包含：
  - `/apps` - 应用模块目录
  - `/config` - 项目配置 
  - `/utils` - 工具函数
  - `/templates` - HTML模板
  - `/static` - 静态文件

### 命名约定
- Python文件：使用snake_case，如`user_service.py`
- 类名：使用PascalCase，如`UserProfile`
- 函数和变量：使用snake_case，如`get_user_data`
- 常量：使用大写SNAKE_CASE，如`DEFAULT_TIMEOUT`

**详细规范请参考：`@.cursor project-structure`** 