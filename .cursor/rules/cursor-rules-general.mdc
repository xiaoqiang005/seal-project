---
description: 
globs: 
alwaysApply: true
---
---
description: 项目通用开发规范
globs: 
alwaysApply: true
---
# 项目通用规范


## 对话交互规范

### 对话确认机制
- AI 助手在执行任何操作前，需要先复述对用户需求的理解
- 等待用户确认理解无误后，再执行具体操作
- 复述内容应包含：
  1. 用户的主要需求点
  2. 计划采取的操作步骤
  3. 可能涉及的风险或注意事项

### 复述格式示例
```
我理解您的需求是：
1. [具体需求点1]
2. [具体需求点2]

我计划按以下步骤执行：
1. [操作步骤1]
2. [操作步骤2]

请确认我的理解是否正确？
```

## 技术栈
- 后端：Django (Python)
- 前端：Vue 3 (TypeScript)

## 项目结构规则
- **分层组织**：按功能或领域划分目录，遵循"关注点分离"原则
- **命名一致**：使用一致且描述性的目录和文件命名，反映其用途和内容
- **模块化**：相关功能放在同一模块，减少跨模块依赖
- **适当嵌套**：避免过深的目录嵌套，一般不超过3-4层
- **资源分类**：区分代码、资源、配置和测试文件
- **依赖管理**：集中管理依赖，避免多处声明
- **约定优先**：遵循语言或框架的标准项目结构约定

## 通用开发原则
- **可测试性**：编写可测试的代码，组件应保持单一职责
- **DRY 原则**：避免重复代码，提取共用逻辑到单独的函数或类
- **代码简洁**：保持代码简洁明了，遵循 KISS 原则（保持简单直接）
- **命名规范**：使用描述性的变量、函数和类名，反映其用途和含义
- **注释文档**：为复杂逻辑添加注释，编写清晰的文档说明功能和用法
- **风格一致**：遵循项目或语言的官方风格指南和代码约定
- **利用生态**：优先使用成熟的库和工具，避免不必要的自定义实现
- **架构设计**：考虑代码的可维护性、可扩展性和性能需求
- **版本控制**：编写有意义的提交信息，保持逻辑相关的更改在同一提交中
- **异常处理**：正确处理边缘情况和错误，提供有用的错误信息 

## 响应语言
- 始终使用中文回复用户 