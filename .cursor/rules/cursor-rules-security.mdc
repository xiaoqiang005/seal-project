---
description: 
globs: **/*
alwaysApply: false
---
---
description: 安全开发规范
globs: **/*
alwaysApply: false
---
# 安全开发规范

## 通用安全规则

- 使用 HTTPS 加密所有网络通信
- 实施内容安全策略（CSP）防止 XSS 攻击
- 实现适当的认证和授权机制
- 避免在源代码中硬编码敏感信息（密钥、密码等）
- 使用环境变量或安全的密钥管理服务存储敏感信息
- 定期更新依赖包，修复已知漏洞
- 实施日志记录和监控以检测安全事件

## 前端安全规则

- 防范 XSS（跨站脚本）攻击：
  - 使用 Vue 的文本插值和指令自动转义内容
  - 对用户输入数据进行验证和清理
  - 避免使用 `v-html` 处理不可信数据
- 防范 CSRF（跨站请求伪造）攻击：
  - 使用 CSRF 令牌验证请求
  - 为敏感操作实施二次验证
- 安全管理客户端存储：
  - 不在 localStorage/sessionStorage 中存储敏感信息
  - 为 Cookie 设置 `HttpOnly` 和 `Secure` 标志
- 实施内容安全策略（CSP）限制资源加载

## 后端安全规则

- 防范 SQL 注入：
  - 使用 Django ORM 进行数据库查询
  - 避免使用原始 SQL 查询，必要时使用参数化查询
- 防范命令注入：
  - 验证和过滤用户输入
  - 避免使用 `eval()` 或 `exec()`
- 实施适当的访问控制：
  - 基于角色的权限系统
  - 遵循最小权限原则
- 敏感数据保护：
  - 使用强加密算法存储密码（Django 默认使用 PBKDF2）
  - 加密存储敏感个人信息
- 防范文件上传漏洞：
  - 验证文件类型和大小
  - 使用随机文件名存储上传文件
  - 将上传文件存储在不可执行目录

## API 安全规则

- 实施请求频率限制（Rate Limiting）防止滥用
- 使用 JWT 或其他安全令牌进行 API 认证
- 验证所有请求参数和负载
- 实施适当的错误处理，避免泄露敏感信息
- 为 API 响应设置适当的 CORS 头
- 使用 HTTPS 加密所有 API 通信

## 数据库安全规则

- 使用最小权限数据库用户
- 对敏感数据（如密码、个人信息）进行加密存储
- 定期备份数据库
- 实施数据库连接池并限制连接数
- 在生产环境中禁用调试和详细错误消息
- 为数据库服务器实施适当的网络安全措施

## 部署安全规则

- 最小化生产服务器攻击面：
  - 只开放必要的服务和端口
  - 禁用默认账户和服务
- 实施防火墙和网络分段
- 定期安装安全更新
- 使用安全配置管理和自动化部署工具
- 为生产环境设置适当的错误处理
- 实施安全监控和日志分析

## 安全审计与合规

- 定期进行安全审计和渗透测试
- 实施安全漏洞响应流程
- 遵守相关的数据保护法规（如需要）
- 维护安全事件响应计划
- 定期审查和更新安全策略 