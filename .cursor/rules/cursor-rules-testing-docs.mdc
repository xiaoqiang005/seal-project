---
description: 
globs: **/*
alwaysApply: false
---
---
description: 测试与文档规范
globs: **/*
alwaysApply: false
---
# 测试与文档规范

## 前端测试规则

### 单元测试
- 使用 Jest 进行单元测试
- 组件测试使用 Vue Test Utils
- 为关键业务逻辑和组件编写测试
- 使用模拟（mock）测试外部依赖
- 保持测试独立，避免测试间的相互依赖
- 遵循 AAA 模式：Arrange（准备）、Act（执行）、Assert（断言）

### 端到端测试
- 使用 Cypress 进行端到端测试
- 测试关键用户流程和交互
- 设置测试环境，模拟真实数据
- 集成到 CI/CD 流程中

## 后端测试规则

### 单元测试
- 使用 pytest 进行单元测试
- 为模型、视图、序列化器等编写测试
- 使用 pytest-django 插件简化测试
- 实现测试覆盖率报告（使用 pytest-cov）
- 用 `@pytest.fixture` 创建测试数据

### 集成测试
- 测试 API 端点的完整功能
- 使用 Django 测试客户端发送请求
- 验证响应状态码和内容
- 测试数据库交互
- 测试权限和认证逻辑

### 性能测试
- 使用 locust 进行负载测试
- 识别并优化性能瓶颈
- 设置性能基准和监控

## 自动化测试规则

- 在 CI/CD 管道中集成自动测试
- 提交代码前运行相关测试
- 保持测试运行快速
- 使用测试覆盖率工具监控代码覆盖率
- 定期运行全套测试，尤其是耗时的集成测试

## 文档生成规则

### 代码文档
- 前端使用 JSDoc 记录组件和函数
- 后端使用 Sphinx 生成 Python 文档
- 保持文档与代码同步更新
- 包含代码示例和用法说明

### API 文档
- 使用 Swagger/OpenAPI 自动生成 API 文档
- 每个 API 端点包含详细说明、参数和响应示例
- 使用 drf-yasg 集成到 Django REST framework
- 提供交互式 API 测试界面

### 项目文档
- 使用 Markdown 编写项目文档
- 包含架构图、数据流程图和业务流程图
- 文档应包括：
  - 项目介绍和目标
  - 安装和环境设置指南
  - 开发指南和规范
  - 部署流程
  - 故障排除和常见问题

## 持续集成与部署

### CI 流程
- 使用 GitHub Actions 或 Jenkins 实现 CI/CD
- 每次提交自动运行测试
- 执行代码质量检查（linting、格式化）
- 生成并发布文档
- 构建应用程序

### CD 流程
- 实现自动化部署流程
- 使用环境变量管理不同环境的配置
- 实现回滚机制处理失败的部署
- 执行部署后验证测试

## 代码审查规则

- 所有代码通过 Pull Request 提交
- 至少一位团队成员审查代码
- 使用代码审查清单确保质量
- 审查点包括：
  - 功能完整性
  - 代码质量和可读性
  - 安全性考虑
  - 测试覆盖率
  - 文档完整性 